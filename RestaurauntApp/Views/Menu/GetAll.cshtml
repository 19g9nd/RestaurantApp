@model List<MenuItem>

@{
    ViewData["Title"] = "Menu Items";
}

<title>@ViewData["Title"]</title>

<style>
    /* Style for the main container */
    .main-container {
        background-color: #f2f2f2;
        color: #333;
        margin: 0;
        padding: 0;
        max-height: fit-content;
    }

    /* Style for the page title */
    h2 {
        text-align: center;
        padding: 20px;
        color: #ff4081;
        font-size: 28px;
    }

    /* Style for each menu item */
    .menu-item {
        display: flex;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #ddd;
        background-color: #fff;
    }

    .menu-item img {
        width: 150px;
        height: 150px;
        margin-right: 20px;
        border-radius: 10px;
    }

    .rotate {
        width: 150px;
        height: 150px;
        margin-right: 20px;
        border-radius: 10px;
    }

    .menu-item div {
        flex-grow: 1;
    }

    .menu-item h5 {
        font-size: 24px;
        margin: 0;
    }

    .menu-item p {
        font-size: 16px;
        margin: 5px 0;
        color: #666;
    }

    .menu-item strong {
        font-weight: 600;
    }

    .menu-item button {
        background-color: #080708;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 3px;
        cursor: pointer;
        margin-right: 10px;
    }

    .createBtn {
        text-align: center;
        margin-top: 20px;
    }

    .createBtn a {
        display: inline-block;
        background-color: #ff4081;
        color: white;
        text-decoration: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

    .createBtn a:hover {
        background-color: #ff0066;
    }

    /* Стили для модального окна */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);

    }

    .modal-content {
        background-color: #f9f9f9;
        width: 80%;
        max-width: 600px;
        margin: 100px auto;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
        position: relative;
        top: 100px;
    }


    .modal-close {
        align-items: center;
        background-color: #FFCF00;
        border: 2px solid #111;
        border-radius: 8px;
        box-sizing: border-box;
        color: #111;
        cursor: pointer;
        display: flex;
        font-family: Inter, sans-serif;
        font-size: 16px;
        height: 48px;
        justify-content: center;
        line-height: 24px;
        max-width: 100%;
        padding: 0 25px;
        text-align: center;
        text-decoration: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }

    .modal-close:after {
        background-color: #111;
        border-radius: 8px;
        content: "";
        display: block;
        height: 48px;
        left: 0;
        width: 100%;
        position: absolute;
        top: -2px;
        transform: translate(8px, 8px);
        transition: transform .2s ease-out;
        z-index: -1;
    }

    .modal-close:hover:after {
        transform: translate(0, 0);
    }

    .modal-close:active {
        background-color: #ffbf00;
        outline: 0;
    }

    .modal-close:hover {
        outline: 0;
    }

    .button-50 {
        appearance: button;
        background-color: #f5006a;
        color: white;
        background-image: none;
        border: 1px solid #000;
        border-radius: 4px;
        box-shadow: #fff 4px 4px 0 0, #000 4px 4px 0 1px;
        box-sizing: border-box;
        color: #fff;
        cursor: pointer;
        display: inline-block;
        font-family: ITCAvantGardeStd-Bk, Arial, sans-serif;
        font-size: 14px;
        font-weight: 400;
        line-height: 20px;
        margin: 0 5px 10px 0;
        overflow: visible;
        padding: 12px 40px;
        text-align: center;
        text-transform: none;
        touch-action: manipulation;
        user-select: none;
        -webkit-user-select: none;
        vertical-align: middle;
        white-space: nowrap;
    }

    .button-50:focus {
        text-decoration: none;
    }

    .button-50:hover {
        text-decoration: none;
    }

    .button-50:active {
        box-shadow: rgba(0, 0, 0, .125) 0 3px 5px inset;
        outline: 0;
    }

    .button-50:not([disabled]):active {
        box-shadow: #d0ff00 2px 2px 0 0, #000 2px 2px 0 1px;
        transform: translate(2px, 2px);
    }

    @@media (min-width: 768px) {
        .modal-close {
            padding: 0 40px;
        }

        .button-50 {
            padding: 12px 50px;
        }
    }

    .menu-item button {
        background-color: #080708;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 3px;
        cursor: pointer;
        margin-right: 10px;
    }

    .category-filter {
        text-align: center;
        margin-bottom: 20px;
    }

    .category-filter button {
        margin: 5px;
        padding: 8px 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: #ff4081;
        color: white;
    }

    .rotate {
        animation: spin 5s linear infinite;
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }
    }


    .menu-item-details {
        flex-grow: 1;
        overflow: hidden;
    }
    .menu-container {
    display: flex;
    flex-wrap: wrap; /* Разрешает перенос элементов на следующую строку */
    justify-content: space-between; /* Распределение элементов по ширине контейнера */
    padding: 0 20px; /* Отступы по бокам */
}

</style>


<body class="main-container">
    <h2>Menu Items</h2>
    <div class="category-filter">
        <button onclick="showAllItems()">Show All</button>
        <button onclick="filterItems('pizza')">Pizza</button>
        <button onclick="filterItems('pasta')">Pasta</button>
        <button onclick="filterItems('drink')">Drink</button>
        <button onclick="filterItems('salad')">Salad</button>
    </div>
    <div class="menu-grid">
      @foreach (var menuItem in Model)
{
    <div class="menu-item  @(menuItem.Category)">
        <img class="@(menuItem.Category == "pizza" ? "rotate" : "")" src="@Url.Content(menuItem.ImageURL)"
            alt="@menuItem.Name" />
        <div class="menu-item-details">
            <h3>@menuItem.Name</h3>
            <p>@menuItem.Description</p>
            <p><strong>Category:</strong> @menuItem.Category</p>
            <p><strong>Calories:</strong> @menuItem.Calories</p>
            <p><strong>Price:</strong> @string.Format("{0:C}", menuItem.Price)</p>
            @if (this.User.IsInRole("Admin"))
            {
                  <button type="button" class="button-50 delete-button"
                        onclick="UpdateItem(@menuItem.Id)">Change</button>
                <form id="deleteForm-@menuItem.Id">
                    <input type="hidden" name="id" value="@menuItem.Id" />
                    <button type="button" class="button-50 delete-button"
                        onclick="submitDelete(@menuItem.Id)">Delete</button>
                </form>
            }
            <a onclick="openDetails(@menuItem.Id)" class="button-50">Details</a>
        </div>
    </div>
}

    </div>

    <div id="productDetailsModal" class="modal">
        <div class="modal-content">
            <!-- Content will be displayed here -->
        </div>
    </div>

    @if (this.User.IsInRole("Admin"))
    {
        <div class="createBtn">
            <a asp-action="Create">Add New Item</a>
        </div>
    }
</body>


<script>
    function UpdateItem(itemId) {
    fetch('/menu/edit/' + itemId, {
        method: 'GET'
    })
    .then(response => {
        if (response.ok) {
            return response.text();
        } else {
            throw new Error('Failed to load item for editing.');
        }
    })
    .then(data => {
        const modalContent = document.querySelector('#productDetailsModal .modal-content');
        modalContent.innerHTML = data;
        modalContent.innerHTML += '<button type="button" class="modal-close" onclick="closeModal()">&times;</button>';
        const modal = document.getElementById('productDetailsModal');
        modal.style.display = 'block';
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

    function openDetails(menuItemId) {
        fetch('/menu/GetDetails?id=' + menuItemId, {
            method: 'GET'
        })
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Ошибка загрузки данных.');
                }
            })
            .then(data => {
                const modalContent = document.querySelector('#productDetailsModal .modal-content');
                modalContent.innerHTML = data;
                modalContent.innerHTML += '<button type="button" class="modal-close" onclick="closeModal()">&times;</button>';
                const modal = document.getElementById('productDetailsModal');
                modal.style.display = 'block';
            })
            .catch(error => {
                console.error('Ошибка загрузки данных: ' + error);
            });
    }

    function closeModal() {
        const modal = document.getElementById('productDetailsModal');
        modal.style.display = 'none';
    }

    function submitDelete(itemId) {
        if (confirm('Are you sure you want to delete this item?')) {
            var form = document.getElementById('deleteForm-' + itemId);
            var formData = new FormData(form);
            fetch('/menu/DeleteAsync', {
                method: 'DELETE',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else if (response.status === 404) {
                        alert('Item not found.');
                    } else {
                        alert('Failed to delete item.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
    }

    // Добавление товара в корзину
    function addToCart(itemId, itemName, itemPrice) {
        let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        var quantity = parseInt(document.getElementById("quantity").value); // Получаем количество из поля ввода и преобразуем его в число
        var itemIndex = cartItems.findIndex(item => item.id === itemId); // Ищем индекс товара с заданным id
        if (itemIndex !== -1) {
            // Если товар с таким id уже есть в корзине, увеличиваем его количество
            cartItems[itemIndex].quantity += quantity;
        } else {
            // Иначе добавляем новый товар в корзину
            var item = { id: itemId, name: itemName, price: itemPrice, quantity: quantity };
            cartItems.push(item);
        }
        localStorage.setItem('cartItems', JSON.stringify(cartItems));
        var message = "Added " + quantity + " item(s) to cart.";
        document.getElementById("addedMessage").innerHTML = message;
        setTimeout(function () {
            document.getElementById("addedMessage").innerHTML = "";
        }, 3000);
    }


    function filterItems(category) {
        const menuItems = document.querySelectorAll('.menu-item') ;
        menuItems.forEach(item => {
            if (item.classList.contains(category)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Function to show all items
    function showAllItems() {
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
            item.style.display = 'flex';
        });
    }
    // Получение данных о корзине
    function getCartItems() {
        return JSON.parse(localStorage.getItem('cartItems')) || [];
    }


</script>
